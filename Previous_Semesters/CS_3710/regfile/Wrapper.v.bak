module cpu_alu_datapath
input clk, regEnable, reset, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;

wire reg_to_muxA, reg_to_muxB;

output [16]bus_output;

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile reg0(
    .D_in(bus_output),
    .wEnable(regEnable),
    .reset(reset),
    .clk(clk),
    .r(r0),
);

regfile_2D_memory reg_bank(
    .r0(reg0),
    .r1(reg1),
    .r1(reg1),
    .r1(reg1),
    .r1(reg1),
    .r0(reg0),
    .r0(reg0),
    .r0(reg0),
    .r0(reg0),
    .r0(reg0),
    .r0(reg0),
    .r0(reg0),
    .r0(reg0),
    .r0(reg0),
    .r0(reg0),
    .r0(reg0),

);

Mux16to1 muxA(

);


endmodule